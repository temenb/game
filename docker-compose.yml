services:
  gateway:
    container_name: game-gateway
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    env_file:
      - services/gateway/.env
    ports:
      - "3000:3000"
      - "5000:5000"
    volumes:
      - ./shared:/usr/src/app/shared
      - ./services/gateway/src:/usr/src/app/services/gateway/src/
      - ./services/gateway/package.json:/usr/src/app/services/gateway/package.json
    command: pnpm dlx turbo run dev --parallel

  auth:
    container_name: game-auth
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    env_file:
      - services/auth/.env
    volumes:
      - ./shared:/usr/src/app/shared
      - ./services/auth/prisma:/usr/src/app/services/auth/prisma
      - ./services/auth/src:/usr/src/app/services/auth/src/
      - ./services/auth/package.json:/usr/src/app/services/auth/package.json
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: pnpm dlx turbo run dev --parallel

  profile:
    container_name: game-profile
    build:
      context: .
      dockerfile: services/profile/Dockerfile
    env_file:
      - services/profile/.env
    volumes:
      - ./shared:/usr/src/app/shared
      - ./services/profile/prisma:/usr/src/app/services/profile/prisma
      - ./services/profile/src:/usr/src/app/services/profile/src/
      - ./services/profile/package.json:/usr/src/app/services/profile/package.json
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: pnpm dlx turbo run dev --parallel

  engine:
    container_name: game-engine
    build:
      context: .
      dockerfile: services/engine/Dockerfile
    env_file:
      - services/engine/.env
    volumes:
      - ./shared:/usr/src/app/shared
      - ./services/engine/prisma:/usr/src/app/services/engine/prisma
      - ./services/engine/src:/usr/src/app/services/engine/src/
      - ./services/engine/package.json:/usr/src/app/services/engine/package.json
    command: pnpm dlx turbo run dev --parallel

  server:
    container_name: game-server
    build:
      context: .
      dockerfile: services/server/Dockerfile
    env_file:
      - services/server/.env
    volumes:
      - ./shared:/usr/src/app/shared
      - ./services/server/prisma:/usr/src/app/services/server/prisma
      - ./services/server/src:/usr/src/app/services/server/src/
      - ./services/server/package.json:/usr/src/app/services/server/package.json
    command: pnpm dlx turbo run dev --parallel

#  ship:
#    container_name: game-ship
#    build:
#      context: .
#      dockerfile: services/ship/Dockerfile
#    env_file:
#      - services/ship/.env
#    volumes:
#      - ./shared:/usr/src/app/shared
#      - ./services/ship/prisma:/usr/src/app/services/ship/prisma
#      - ./services/ship/src:/usr/src/app/services/ship/src/
#      - ./services/ship/package.json:/usr/src/app/services/ship/package.json
#    command: pnpm dlx turbo run dev --parallel
#    depends_on:
#      kafka:
#        condition: service_healthy
#      postgres:
#        condition: service_healthy
#
#  asteroid:
#    container_name: game-asteroid
#    build:
#      context: .
#      dockerfile: services/asteroid/Dockerfile
#    env_file:
#      - services/asteroid/.env
#    volumes:
#      - ./shared:/usr/src/app/shared
#      - ./services/asteroid/prisma:/usr/src/app/services/asteroid/prisma
#      - ./services/asteroid/src:/usr/src/app/services/asteroid/src/
#      - ./services/asteroid/package.json:/usr/src/app/services/asteroid/package.json
#    depends_on:
#      kafka:
#        condition: service_healthy
#      postgres:
#        condition: service_healthy
#    command: pnpm dlx turbo run dev --parallel
#
#
#  mailer:
#    container_name: game-mailer
#    build:
#      context: .
#      dockerfile: services/mailer/Dockerfile
#    env_file:
#      - services/mailer/.env
#    volumes:
#       - ./shared:/usr/src/app/shared
#       - ./services/mailer/prisma:/usr/src/app/services/mailer/prisma
#       - ./services/mailer/src:/usr/src/app/services/mailer/src/
#       - ./services/mailer/package.json:/usr/src/app/services/mailer/package.json
#    command: pnpm dlx turbo run dev --parallel
#    depends_on:
#      postgres:
#        condition: service_healthy

  kafka:
    container_name: game-kafka
    image: bitnami/kafka:4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_CLUSTER_ID: "kraft-cluster-001"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      ALLOW_PLAINTEXT_LISTENER: yes
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    container_name: game-postgres
    image: postgres:17.6
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

#  mongo:
#    container_name: game-mongo
#    image: mongo:8
#    restart: always
#    ports:
#      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: mongo
#      MONGO_INITDB_ROOT_PASSWORD: mongo
#      MONGO_INITDB_DATABASE: game
#    volumes:
#      - mongo_data:/data/db
#    healthcheck:
#      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s
#
#  mailpit:
#    image: axllent/mailpit
#    container_name: game-mailpit
#    ports:
#      - 8025:8025
#      - 1025:1025
#    environment:
#      MP_WEBROOT : "/mailpit/"
##      MP_SMTP_AUTH_ACCEPT_ANY: 1
#      MP_SMTP_AUTH_ALLOW_INSECURE: 1
#      MP_SMTP_AUTH: "login:pass"
#      MP_MAX_MESSAGES: 5000
#    volumes:
#      - /data
#    restart: always
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5

volumes:
  postgres_data:
  kafka_data:
  mongo_data: